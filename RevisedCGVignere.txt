#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

// Function to preprocess the message (uppercase and remove duplicates)
string preprocessMessage(string message) {
    for (size_t i = 0; i < message.length(); i++) {
        message[i] = toupper(message[i]);
        for (size_t j = i + 1; j < message.length(); j++) {
            if (message[i] == message[j]) {
                message[j] = 'X'; // Replace duplicate letters
            }
        }
    }
    return message;
}

// Function to expand the key to match the message length
string expandKey(const string &key, size_t length) {
    string expandedKey = key;
    while (expandedKey.length() < length) {
        expandedKey += key;
    }
    return expandedKey.substr(0, length);
}

// Vigenere Cipher encryption
string encryptVigenere(const string &message, const string &key) {
    string encrypted;
    for (size_t i = 0; i < message.length(); i++) {
        char encryptedChar = ((message[i] - 'A') + (key[i] - 'A')) % 26 + 'A';
        encrypted += encryptedChar;
    }
    return encrypted;
}

// Vigenere Cipher decryption
string decryptVigenere(const string &encrypted, const string &key) {
    string decrypted;
    for (size_t i = 0; i < encrypted.length(); i++) {
        char decryptedChar = ((encrypted[i] - key[i] + 26) % 26) + 'A';
        decrypted += decryptedChar;
    }
    return decrypted;
}

int main() {
    string key, message;
    cout << "Enter key: ";
    cin >> key;
    cout << "Enter message: ";
    cin >> message;
    
    message = preprocessMessage(message);
    key = expandKey(key, message.length());
    
    string encrypted = encryptVigenere(message, key);
    string decrypted = decryptVigenere(encrypted, key);
    
    cout << "\nOriginal Message: " << message;
    cout << "\nExpanded Key: " << key;
    cout << "\nEncrypted Message: " << encrypted;
    cout << "\nDecrypted Message: " << decrypted << endl;
    
    return 0;
}
